
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(cuid())
  title    String    @unique
  articles Article[] @relation("ArticleToCategory")
}

model Article {
  id              String     @id @default(cuid())
  headline        String
  summary         String
  content         String
  image           String?
  views           Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isEditorsChoice Boolean
  authors         Author[]   @relation("ArticleToAuthor")
  categories      Category[] @relation("ArticleToCategory")

  organizationId    String?
  organization      Organization? @relation("OrganizationToArticle", fields: [organizationId], references: [id])
  isGlobalRepost    Boolean       @default(false)
  originalArticleId String?
}

model Author {
  id       String    @id @default(cuid())
  name     String    @unique
  picture  String?
  articles Article[] @relation("ArticleToAuthor")
}

model User {
  id             String        @id @default(cuid())
  role           String        @default("user")
  email          String        @unique
  name           String?
  emailVerified  Boolean       @default(false)
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscriptionId String?
  permissions    String[]
  invitations    Invitation[]  @relation("invitations")
  members        Member[]
  banned         Boolean       @default(false)
  banReason      String?
  banExpires     DateTime?
  payments       Payment[]
  accounts       Account[]
  sessions       Session[]
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?
  impersonatedBy       String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model SubscriptionType {
  id            String         @id @default(cuid())
  name          String
  description   String
  features      String[]
  price         Decimal        @db.Decimal(10, 2)
  subscriptions Subscription[]
}

model Subscription {
  id        String           @id @default(cuid())
  typeId    String
  createdAt DateTime         @default(now())
  expiresAt DateTime
  payments  Payment[]
  type      SubscriptionType @relation(fields: [typeId], references: [id])
  users     User[]
}

model Payment {
  id             String       @id @default(cuid())
  userId         String
  subscriptionId String
  amount         Decimal      @db.Decimal(10, 2)
  status         String       @default("pending")
  createdAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     Member[]
  teams       Team[]
  articles    Article[]    @relation("OrganizationToArticle")
  invitations Invitation[]

  metadata String?

  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  role           String       @default("member") // owner, admin, member 
  userId         String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teams          TeamMember[]

  teamId String?

  @@unique([userId, organizationId])
  @@map("member")
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  memberId  String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([teamId, memberId])
  @@map("team_member")
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  role           String       @default("member")
  status         String       @default("pending") // pending, accepted, rejected, canceled
  organizationId String
  inviterId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  expiresAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User         @relation("invitations", fields: [inviterId], references: [id])

  teamId String?

  @@unique([email, organizationId])
  @@map("invitation")
}

model Receipt {
  id            String   @id @default(cuid())
  cardId        String
  cardNumber    String
  cardHolder    String
  cardType      String
  plan          String
  price         Float
  startDate     DateTime
  endDate       DateTime
  transactionId String
  userEmail     String
  userAddress   String
  createdAt     DateTime @default(now())
}
model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}